/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

public class AvoidRetainAllTest {

    @Test (expected = UnsupportedOperationException.class)
    public void whenUseListOfFactoryMethod_ThrowUnsupportedOperationException() {
        var l = List.of(1,2,3,4,5,6);
        var odd = List.of(1,3,5);

        AvoidRetainAll.retainAll(l, odd);

    }

    @Test (expected = UnsupportedOperationException.class)
    public void whenUseArraysAsListFactoryMethod_ThrowUnsupportedOperationException() {
        var l = Arrays.asList(1,2,3,4,5,6);
        var odd = List.of(1,3,5);

        // AbstractCollection.retainAll use a default remove method on iterator instance (Iterator.remove)
        AvoidRetainAll.retainAll(l, odd);
    }

    @Test
    public void whenRetainElementsOfTheSameType_ListContainsOnlyTheRetainedElements() {
        var l = new ArrayList<Integer>();
        l.add(1);
        l.add(2);
        l.add(3);
        l.add(4);
        l.add(5);
        l.add(6);

        var odd = List.of(1,3,5);

        Assert.assertEquals(odd, AvoidRetainAll.retainAll(l, odd));

    }

    @Test
    public void whenReatainElementsOfDifferentType_ListIsEmpty() {
        var l = new ArrayList<Integer>();
        l.add(1);
        l.add(2);
        l.add(3);
        l.add(4);
        l.add(5);
        l.add(6);

        var odd = List.of("1", "3", "5");

        // no compilation failure
        Assert.assertTrue(AvoidRetainAll.retainAll(l, odd).isEmpty());

    }

    @Test
    public void whenFilterForOddElements_ListContainsOnlyOddsElements() {
        var l = new ArrayList<Integer>();
        l.add(1);
        l.add(2);
        l.add(3);
        l.add(4);
        l.add(5);
        l.add(6);

        // predicate must be of the same type of the list
        Predicate<Integer> odd = (x) -> x % 2 == 1;

        Assert.assertEquals(List.of(1,3,5), AvoidRetainAll.filter(l, odd));

    }
}
